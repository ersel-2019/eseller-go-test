/*
 * Onboarding | GW system 2.0
 *
 * * All endpoint paths start with a version like `/v1`   * All versions must be maintained and functional forever or until decision is made to decommission a version * _`POST`_ and _`PUT`_ request **payloads are JSON** * Where possible HTTP request **status codes are used to describe the successfulness** of the requests, and content describes the details of the status <h1>Flow states</h1> <a href=\"https://viewer.diagrams.net/?highlight=0000ff&edit=_blank&layers=1&nav=1#G1cb9foqv8zgGVY0KWIQRTiE0-21ST3WUI\">Link to Diagram</a> 
 *
 * API version: 0.0.1
 * Contact: someone@ikea.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PairingInfo struct for PairingInfo
type PairingInfo struct {
	PairingId *string `json:"pairingId,omitempty"`
}

// NewPairingInfo instantiates a new PairingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPairingInfo() *PairingInfo {
	this := PairingInfo{}
	return &this
}

// NewPairingInfoWithDefaults instantiates a new PairingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPairingInfoWithDefaults() *PairingInfo {
	this := PairingInfo{}
	return &this
}

// GetPairingId returns the PairingId field value if set, zero value otherwise.
func (o *PairingInfo) GetPairingId() string {
	if o == nil || o.PairingId == nil {
		var ret string
		return ret
	}
	return *o.PairingId
}

// GetPairingIdOk returns a tuple with the PairingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PairingInfo) GetPairingIdOk() (*string, bool) {
	if o == nil || o.PairingId == nil {
		return nil, false
	}
	return o.PairingId, true
}

// HasPairingId returns a boolean if a field has been set.
func (o *PairingInfo) HasPairingId() bool {
	if o != nil && o.PairingId != nil {
		return true
	}

	return false
}

// SetPairingId gets a reference to the given string and assigns it to the PairingId field.
func (o *PairingInfo) SetPairingId(v string) {
	o.PairingId = &v
}

func (o PairingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PairingId != nil {
		toSerialize["pairingId"] = o.PairingId
	}
	return json.Marshal(toSerialize)
}

type NullablePairingInfo struct {
	value *PairingInfo
	isSet bool
}

func (v NullablePairingInfo) Get() *PairingInfo {
	return v.value
}

func (v *NullablePairingInfo) Set(val *PairingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePairingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePairingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePairingInfo(val *PairingInfo) *NullablePairingInfo {
	return &NullablePairingInfo{value: val, isSet: true}
}

func (v NullablePairingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePairingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


