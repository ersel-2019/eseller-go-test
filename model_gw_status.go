/*
 * Onboarding | GW system 2.0
 *
 * * All endpoint paths start with a version like `/v1`   * All versions must be maintained and functional forever or until decision is made to decommission a version * _`POST`_ and _`PUT`_ request **payloads are JSON** * Where possible HTTP request **status codes are used to describe the successfulness** of the requests, and content describes the details of the status <h1>Flow states</h1> <a href=\"https://viewer.diagrams.net/?highlight=0000ff&edit=_blank&layers=1&nav=1#G1cb9foqv8zgGVY0KWIQRTiE0-21ST3WUI\">Link to Diagram</a> 
 *
 * API version: 0.0.1
 * Contact: someone@ikea.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GWStatus struct for GWStatus
type GWStatus struct {
	State *string `json:"state,omitempty"`
	LastSingleButtonTap *string `json:"lastSingleButtonTap,omitempty"`
	LastDoubleButtonTap *string `json:"lastDoubleButtonTap,omitempty"`
	ActivePairing *ActivePairing `json:"activePairing,omitempty"`
	PairedDevices *[]DeviceInfo `json:"pairedDevices,omitempty"`
}

// NewGWStatus instantiates a new GWStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGWStatus() *GWStatus {
	this := GWStatus{}
	return &this
}

// NewGWStatusWithDefaults instantiates a new GWStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGWStatusWithDefaults() *GWStatus {
	this := GWStatus{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GWStatus) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GWStatus) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GWStatus) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *GWStatus) SetState(v string) {
	o.State = &v
}

// GetLastSingleButtonTap returns the LastSingleButtonTap field value if set, zero value otherwise.
func (o *GWStatus) GetLastSingleButtonTap() string {
	if o == nil || o.LastSingleButtonTap == nil {
		var ret string
		return ret
	}
	return *o.LastSingleButtonTap
}

// GetLastSingleButtonTapOk returns a tuple with the LastSingleButtonTap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GWStatus) GetLastSingleButtonTapOk() (*string, bool) {
	if o == nil || o.LastSingleButtonTap == nil {
		return nil, false
	}
	return o.LastSingleButtonTap, true
}

// HasLastSingleButtonTap returns a boolean if a field has been set.
func (o *GWStatus) HasLastSingleButtonTap() bool {
	if o != nil && o.LastSingleButtonTap != nil {
		return true
	}

	return false
}

// SetLastSingleButtonTap gets a reference to the given string and assigns it to the LastSingleButtonTap field.
func (o *GWStatus) SetLastSingleButtonTap(v string) {
	o.LastSingleButtonTap = &v
}

// GetLastDoubleButtonTap returns the LastDoubleButtonTap field value if set, zero value otherwise.
func (o *GWStatus) GetLastDoubleButtonTap() string {
	if o == nil || o.LastDoubleButtonTap == nil {
		var ret string
		return ret
	}
	return *o.LastDoubleButtonTap
}

// GetLastDoubleButtonTapOk returns a tuple with the LastDoubleButtonTap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GWStatus) GetLastDoubleButtonTapOk() (*string, bool) {
	if o == nil || o.LastDoubleButtonTap == nil {
		return nil, false
	}
	return o.LastDoubleButtonTap, true
}

// HasLastDoubleButtonTap returns a boolean if a field has been set.
func (o *GWStatus) HasLastDoubleButtonTap() bool {
	if o != nil && o.LastDoubleButtonTap != nil {
		return true
	}

	return false
}

// SetLastDoubleButtonTap gets a reference to the given string and assigns it to the LastDoubleButtonTap field.
func (o *GWStatus) SetLastDoubleButtonTap(v string) {
	o.LastDoubleButtonTap = &v
}

// GetActivePairing returns the ActivePairing field value if set, zero value otherwise.
func (o *GWStatus) GetActivePairing() ActivePairing {
	if o == nil || o.ActivePairing == nil {
		var ret ActivePairing
		return ret
	}
	return *o.ActivePairing
}

// GetActivePairingOk returns a tuple with the ActivePairing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GWStatus) GetActivePairingOk() (*ActivePairing, bool) {
	if o == nil || o.ActivePairing == nil {
		return nil, false
	}
	return o.ActivePairing, true
}

// HasActivePairing returns a boolean if a field has been set.
func (o *GWStatus) HasActivePairing() bool {
	if o != nil && o.ActivePairing != nil {
		return true
	}

	return false
}

// SetActivePairing gets a reference to the given ActivePairing and assigns it to the ActivePairing field.
func (o *GWStatus) SetActivePairing(v ActivePairing) {
	o.ActivePairing = &v
}

// GetPairedDevices returns the PairedDevices field value if set, zero value otherwise.
func (o *GWStatus) GetPairedDevices() []DeviceInfo {
	if o == nil || o.PairedDevices == nil {
		var ret []DeviceInfo
		return ret
	}
	return *o.PairedDevices
}

// GetPairedDevicesOk returns a tuple with the PairedDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GWStatus) GetPairedDevicesOk() (*[]DeviceInfo, bool) {
	if o == nil || o.PairedDevices == nil {
		return nil, false
	}
	return o.PairedDevices, true
}

// HasPairedDevices returns a boolean if a field has been set.
func (o *GWStatus) HasPairedDevices() bool {
	if o != nil && o.PairedDevices != nil {
		return true
	}

	return false
}

// SetPairedDevices gets a reference to the given []DeviceInfo and assigns it to the PairedDevices field.
func (o *GWStatus) SetPairedDevices(v []DeviceInfo) {
	o.PairedDevices = &v
}

func (o GWStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.LastSingleButtonTap != nil {
		toSerialize["lastSingleButtonTap"] = o.LastSingleButtonTap
	}
	if o.LastDoubleButtonTap != nil {
		toSerialize["lastDoubleButtonTap"] = o.LastDoubleButtonTap
	}
	if o.ActivePairing != nil {
		toSerialize["activePairing"] = o.ActivePairing
	}
	if o.PairedDevices != nil {
		toSerialize["pairedDevices"] = o.PairedDevices
	}
	return json.Marshal(toSerialize)
}

type NullableGWStatus struct {
	value *GWStatus
	isSet bool
}

func (v NullableGWStatus) Get() *GWStatus {
	return v.value
}

func (v *NullableGWStatus) Set(val *GWStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGWStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGWStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGWStatus(val *GWStatus) *NullableGWStatus {
	return &NullableGWStatus{value: val, isSet: true}
}

func (v NullableGWStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGWStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


